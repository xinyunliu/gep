From 3e2d51dbe5c0eded3a6edc861712d7cc18fc1819 Mon Sep 17 00:00:00 2001
From: Zhipeng Gong <zhipeng.gong@intel.com>
Date: Sun, 15 Jul 2018 20:18:23 +0800
Subject: [PATCH 1/4] drm/i915: add graphics event profiler support

Use GPU Timestamp counter to profile GPU workload.

Signed-off-by: Zhipeng Gong <zhipeng.gong@intel.com>
---
 drivers/gpu/drm/i915/Makefile              |   3 +
 drivers/gpu/drm/i915/gvt/scheduler.c       |   3 +
 drivers/gpu/drm/i915/i915_debugfs.c        |  30 ++-
 drivers/gpu/drm/i915/i915_gem_execbuffer.c |   3 +
 drivers/gpu/drm/i915/i915_gep.c            | 233 +++++++++++++++++++++
 drivers/gpu/drm/i915/i915_gep.h            |  41 ++++
 drivers/gpu/drm/i915/i915_request.c        |   2 +
 drivers/gpu/drm/i915/i915_request.h        |   2 +
 drivers/gpu/drm/i915/i915_trace.h          |  12 ++
 9 files changed, 328 insertions(+), 1 deletion(-)
 create mode 100644 drivers/gpu/drm/i915/i915_gep.c
 create mode 100644 drivers/gpu/drm/i915/i915_gep.h

diff --git a/drivers/gpu/drm/i915/Makefile b/drivers/gpu/drm/i915/Makefile
index 517620bcbadd..9eb0d5d3634a 100644
--- a/drivers/gpu/drm/i915/Makefile
+++ b/drivers/gpu/drm/i915/Makefile
@@ -190,4 +190,7 @@ endif
 # LPE Audio for VLV and CHT
 i915-y += intel_lpe_audio.o
 
+# graphics event profiler
+i915-y += i915_gep.o
+
 obj-$(CONFIG_DRM_I915) += i915.o
diff --git a/drivers/gpu/drm/i915/gvt/scheduler.c b/drivers/gpu/drm/i915/gvt/scheduler.c
index c76c287fa2a1..7bcaab6c7cfe 100644
--- a/drivers/gpu/drm/i915/gvt/scheduler.c
+++ b/drivers/gpu/drm/i915/gvt/scheduler.c
@@ -325,6 +325,8 @@ static int copy_workload_to_ring_buffer(struct intel_vgpu_workload *workload)
 		&& is_inhibit_context(req->hw_context))
 		intel_vgpu_restore_inhibit_context(vgpu, req);
 
+	i915_gep_init_req(workload->req, vgpu->id);
+	i915_gep_start_task(workload->req);
 	/* allocate shadow ring buffer */
 	cs = intel_ring_begin(workload->req, workload->rb_len / sizeof(u32));
 	if (IS_ERR(cs)) {
@@ -343,6 +345,7 @@ static int copy_workload_to_ring_buffer(struct intel_vgpu_workload *workload)
 
 	cs += workload->rb_len / sizeof(u32);
 	intel_ring_advance(workload->req, cs);
+	i915_gep_end_task(workload->req);
 
 	return 0;
 }
diff --git a/drivers/gpu/drm/i915/i915_debugfs.c b/drivers/gpu/drm/i915/i915_debugfs.c
index 89b2863845d5..a0aae2ab0df1 100644
--- a/drivers/gpu/drm/i915/i915_debugfs.c
+++ b/drivers/gpu/drm/i915/i915_debugfs.c
@@ -4553,6 +4553,33 @@ static int i915_sseu_status(struct seq_file *m, void *unused)
 	return 0;
 }
 
+static int
+i915_gep_enable_get(void *data, u64 *val)
+{
+	*val = (u64) i915_gep_is_enabled();
+	return 0;
+}
+
+static int
+i915_gep_enable_set(void *data, u64 val)
+{
+	struct drm_device *dev = data;
+	int ret;
+
+	ret = mutex_lock_interruptible(&dev->struct_mutex);
+	if (ret)
+		return ret;
+
+	ret = i915_gep_enable(dev, (bool)val);
+	mutex_unlock(&dev->struct_mutex);
+	return ret;
+}
+
+DEFINE_SIMPLE_ATTRIBUTE(i915_gep_enable_fops,
+			i915_gep_enable_get,
+			i915_gep_enable_set,
+			"%lld\n");
+
 static int i915_forcewake_open(struct inode *inode, struct file *file)
 {
 	struct drm_i915_private *i915 = inode->i_private;
@@ -4839,7 +4866,8 @@ static const struct i915_debugfs_files {
 	{"i915_hpd_storm_ctl", &i915_hpd_storm_ctl_fops},
 	{"i915_ipc_status", &i915_ipc_status_fops},
 	{"i915_drrs_ctl", &i915_drrs_ctl_fops},
-	{"i915_edp_psr_debug", &i915_edp_psr_debug_fops}
+	{"i915_edp_psr_debug", &i915_edp_psr_debug_fops},
+	{"i915_gep_enable", &i915_gep_enable_fops}
 };
 
 int i915_debugfs_register(struct drm_i915_private *dev_priv)
diff --git a/drivers/gpu/drm/i915/i915_gem_execbuffer.c b/drivers/gpu/drm/i915/i915_gem_execbuffer.c
index 3f0c612d42e7..2ac31b503b41 100644
--- a/drivers/gpu/drm/i915/i915_gem_execbuffer.c
+++ b/drivers/gpu/drm/i915/i915_gem_execbuffer.c
@@ -1954,11 +1954,14 @@ static int eb_submit(struct i915_execbuffer *eb)
 			return err;
 	}
 
+	i915_gep_init_req(eb->request, 0);
+	i915_gep_start_task(eb->request);
 	err = eb->engine->emit_bb_start(eb->request,
 					eb->batch->node.start +
 					eb->batch_start_offset,
 					eb->batch_len,
 					eb->batch_flags);
+	i915_gep_end_task(eb->request);
 	if (err)
 		return err;
 
diff --git a/drivers/gpu/drm/i915/i915_gep.c b/drivers/gpu/drm/i915/i915_gep.c
new file mode 100644
index 000000000000..cdadf1065425
--- /dev/null
+++ b/drivers/gpu/drm/i915/i915_gep.c
@@ -0,0 +1,233 @@
+// SPDX-License-Identifier: GPL-2.0
+#include <linux/kernel.h>
+#include <drm/drm.h>
+#include "i915_drv.h"
+
+struct i915_gep_info {
+	struct drm_i915_gem_object *buf_obj;
+	int buf_offset;
+	u64 ggtt_offset;
+	char __iomem *cpu_addr;
+	bool enabled;
+};
+struct i915_gep_info i915_gep;
+
+#define CIRCLE_BUF_SIZE (256 * PAGE_SIZE)
+#define PIPE_CONTROL_WRITE_TIMESTAMP  (0x03 << 14)
+#define FLUSH_DW_WRITE_TIMESTAMP      (0x03 << 14)
+#define END_TIME_OFFSET 8
+
+static int i915_gep_init(struct drm_device *dev)
+{
+	int ret;
+	struct drm_i915_private *dev_priv = dev->dev_private;
+	struct i915_vma *vma;
+
+	i915_gep.buf_obj = i915_gem_object_create(dev_priv, CIRCLE_BUF_SIZE);
+	if (i915_gep.buf_obj == NULL) {
+		DRM_ERROR("Failed to allocate gep bo\n");
+		return -ENOMEM;
+	}
+
+	vma = i915_gem_object_ggtt_pin(i915_gep.buf_obj, NULL, 0,
+					PAGE_SIZE, PIN_MAPPABLE);
+	if (IS_ERR(vma)) {
+		DRM_ERROR("Failed to pin gep bo\n");
+		goto err_unref;
+	}
+
+	i915_gep.ggtt_offset = i915_ggtt_offset(vma);
+	i915_gep.cpu_addr = io_mapping_map_wc(&dev_priv->ggtt.iomap,
+					i915_gep.ggtt_offset, CIRCLE_BUF_SIZE);
+
+	if (i915_gep.cpu_addr == NULL) {
+		DRM_ERROR("Failed to pin gep bo\n");
+		ret = -ENOSPC;
+		goto err_unpin;
+	}
+
+	i915_gep.enabled = true;
+	i915_gep.buf_offset = 0;
+
+	return 0;
+
+err_unpin:
+	__i915_vma_unpin(vma);
+err_unref:
+	drm_gem_object_unreference(&i915_gep.buf_obj->base);
+	return ret;
+}
+
+static int i915_gep_exit(void)
+{
+	i915_gep.enabled = false;
+	i915_gem_free_object(&i915_gep.buf_obj->base);
+	io_mapping_unmap(i915_gep.cpu_addr);
+	i915_gep.buf_obj = NULL;
+	i915_gep.cpu_addr = NULL;
+	i915_gep.ggtt_offset = 0;
+	i915_gep.buf_offset = 0;
+	return 0;
+}
+
+static void i915_gep_get_buf_space(struct i915_request *req)
+{
+	if (i915_gep.buf_offset + sizeof(struct i915_gep_buf_entry) >=
+						CIRCLE_BUF_SIZE)
+		i915_gep.buf_offset = 0;
+
+	req->gep_req.cpu_addr = (struct i915_gep_buf_entry *)
+			(i915_gep.cpu_addr + i915_gep.buf_offset);
+	req->gep_req.gpu_addr = i915_gep.ggtt_offset + i915_gep.buf_offset;
+	i915_gep.buf_offset += sizeof(struct i915_gep_buf_entry);
+}
+
+static void i915_gep_mi_pipe_control(struct i915_request *req,
+				     u_int32_t addr)
+{
+	u32 *cs;
+
+	cs = intel_ring_begin(req, 6);
+	if (IS_ERR(cs)) {
+		DRM_ERROR("Failed to alloc ring\n");
+		return;
+	}
+
+	*cs++ = GFX_OP_PIPE_CONTROL(6);
+	*cs++ = PIPE_CONTROL_WRITE_TIMESTAMP |
+			PIPE_CONTROL_GLOBAL_GTT_IVB;
+	*cs++ = addr;
+	*cs++ = 0;
+	*cs++ = 0;
+	*cs++ = 0;
+	intel_ring_advance(req, cs);
+}
+
+static void i915_gep_mi_flush_dw(struct i915_request *req,
+				 u_int32_t addr)
+{
+	u32 *cs;
+
+	cs = intel_ring_begin(req, 6);
+	if (IS_ERR(cs)) {
+		DRM_ERROR("Failed to alloc ring\n");
+		return;
+	}
+
+	*cs++ = (MI_FLUSH_DW + 2) | FLUSH_DW_WRITE_TIMESTAMP;
+	*cs++ = (addr & 0xFFFFFFF8) | MI_FLUSH_DW_USE_GTT;
+	*cs++ = 0;
+	*cs++ = 0;
+	*cs++ = 0;
+	*cs++ = 0;
+	intel_ring_advance(req, cs);
+
+}
+
+void i915_gep_init_req(struct i915_request *req, int vgpu_id)
+{
+	req->gep_req.pid = current->pid;
+	req->gep_req.vgpu_id = vgpu_id;
+}
+
+void i915_gep_read_req(struct i915_request *req)
+{
+
+	if (i915_gep.enabled && req->gep_req.cpu_addr != NULL) {
+		struct intel_engine_cs *engine = req->engine;
+		struct drm_i915_private *dev_priv = engine->i915;
+		u_int64_t gpu_time = I915_READ64_2x32(
+				RING_TIMESTAMP(engine->mmio_base),
+				RING_TIMESTAMP_UDW(engine->mmio_base));
+		i915_gep_trace("i915_gep_read_req pid=%d vgpu_id=%d hw_ctx=%d fence_ctx=%llu seqno=%u global_seqno=%u engine=%d prio=%d gpu_time=%llx start=%llx end=%llx",
+			req->gep_req.pid, req->gep_req.vgpu_id,
+			req->gem_context->hw_id, req->fence.context,
+			req->fence.seqno, req->global_seqno,
+			req->engine->id, req->sched.attr.priority, gpu_time,
+			req->gep_req.cpu_addr->start_time,
+			req->gep_req.cpu_addr->end_time);
+	}
+}
+
+int i915_gep_start_task(struct i915_request *req)
+{
+	if (!i915_gep.enabled)
+		return 0;
+
+	i915_gep_get_buf_space(req);
+
+	if (req->engine->id == RCS)
+		i915_gep_mi_pipe_control(req, req->gep_req.gpu_addr);
+	else
+		i915_gep_mi_flush_dw(req, req->gep_req.gpu_addr);
+	return 0;
+}
+
+int i915_gep_end_task(struct i915_request *req)
+{
+	if (!i915_gep.enabled)
+		return 0;
+
+	if (req->engine->id == RCS)
+		i915_gep_mi_pipe_control(req, req->gep_req.gpu_addr +
+					END_TIME_OFFSET);
+	else
+		i915_gep_mi_flush_dw(req, req->gep_req.gpu_addr +
+					END_TIME_OFFSET);
+
+	return 0;
+}
+
+bool i915_gep_is_enabled(void)
+{
+	return i915_gep.enabled;
+}
+
+int i915_gep_enable(struct drm_device *dev, bool enable)
+{
+	if (!i915_gep.enabled && enable)
+		return i915_gep_init(dev);
+	if (i915_gep.enabled && !enable)
+		return i915_gep_exit();
+	return 0;
+}
+
+void i915_gep_trace(const char *fmt, ...)
+{
+	struct va_format vaf;
+	va_list args;
+
+	if (!i915_gep.enabled)
+		return;
+
+	va_start(args, fmt);
+	vaf.fmt = fmt;
+	vaf.va = &args;
+	trace_gep_log(&vaf);
+	va_end(args);
+}
+
+void i915_gep_start_trace(const char *fmt, ...)
+{
+	struct va_format vaf;
+	va_list args;
+	int len;
+	char str[I915_GEP_LOG_MAX];
+
+	if (!i915_gep.enabled)
+		return;
+
+	len = snprintf(str, I915_GEP_LOG_MAX, "B|%d|", current->tgid);
+
+	va_start(args, fmt);
+	vsnprintf(str + len, I915_GEP_LOG_MAX - len, fmt, args);
+	vaf.fmt = str;
+	vaf.va = &args;
+	trace_gep_log(&vaf);
+	va_end(args);
+}
+
+void i915_gep_end_trace(void)
+{
+	i915_gep_trace("E");
+}
diff --git a/drivers/gpu/drm/i915/i915_gep.h b/drivers/gpu/drm/i915/i915_gep.h
new file mode 100644
index 000000000000..01f81f91084b
--- /dev/null
+++ b/drivers/gpu/drm/i915/i915_gep.h
@@ -0,0 +1,41 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+#ifndef _I915_GEP_H_
+#define _I915_GEP_H_
+
+#define I915_GEP_LOG_MAX	256
+
+struct i915_request;
+struct drm_device;
+
+struct i915_gep_buf_entry {
+	u64 start_time;
+	u64 end_time;
+};
+
+struct i915_gep_req {
+	pid_t pid;
+	int vgpu_id;
+	u64 perf_tag;
+	struct i915_gep_buf_entry *cpu_addr;
+	u64 gpu_addr;
+};
+
+bool i915_gep_is_enabled(void);
+
+int i915_gep_enable(struct drm_device *dev, bool enable);
+
+int i915_gep_start_task(struct i915_request *req);
+
+int i915_gep_end_task(struct i915_request *req);
+
+void i915_gep_init_req(struct i915_request *req, int vgpu_id);
+
+void i915_gep_read_req(struct i915_request *req);
+
+void i915_gep_trace(const char *fmt, ...);
+
+void i915_gep_start_trace(const char *fmt, ...);
+
+void i915_gep_end_trace(void);
+
+#endif
diff --git a/drivers/gpu/drm/i915/i915_request.c b/drivers/gpu/drm/i915/i915_request.c
index 1bd2a7ef1885..44725444556a 100644
--- a/drivers/gpu/drm/i915/i915_request.c
+++ b/drivers/gpu/drm/i915/i915_request.c
@@ -422,6 +422,7 @@ static void i915_request_retire(struct i915_request *request)
 
 	trace_i915_request_retire(request);
 
+	i915_gep_read_req(request);
 	advance_ring(request);
 	free_capture_list(request);
 
@@ -806,6 +807,7 @@ i915_request_alloc(struct intel_engine_cs *engine, struct i915_gem_context *ctx)
 	 * position of the head.
 	 */
 	rq->head = rq->ring->emit;
+	memset(&rq->gep_req, 0, sizeof(rq->gep_req));
 
 	/* Unconditionally invalidate GPU caches and TLBs. */
 	ret = engine->emit_flush(rq, EMIT_INVALIDATE);
diff --git a/drivers/gpu/drm/i915/i915_request.h b/drivers/gpu/drm/i915/i915_request.h
index e1c9365dfefb..e7fe6dc73876 100644
--- a/drivers/gpu/drm/i915/i915_request.h
+++ b/drivers/gpu/drm/i915/i915_request.h
@@ -33,6 +33,7 @@
 #include "i915_scheduler.h"
 
 #include <uapi/drm/i915_drm.h>
+#include "i915_gep.h"
 
 struct drm_file;
 struct drm_i915_gem_object;
@@ -180,6 +181,7 @@ struct i915_request {
 	struct drm_i915_file_private *file_priv;
 	/** file_priv list entry for this request */
 	struct list_head client_link;
+	struct i915_gep_req gep_req;
 };
 
 #define I915_FENCE_GFP (GFP_KERNEL | __GFP_RETRY_MAYFAIL | __GFP_NOWARN)
diff --git a/drivers/gpu/drm/i915/i915_trace.h b/drivers/gpu/drm/i915/i915_trace.h
index 6f25961ad9ad..b93c2cf8214d 100644
--- a/drivers/gpu/drm/i915/i915_trace.h
+++ b/drivers/gpu/drm/i915/i915_trace.h
@@ -1020,6 +1020,18 @@ DEFINE_EVENT(i915_context, i915_context_free,
 	TP_ARGS(ctx)
 );
 
+TRACE_EVENT(gep_log,
+	TP_PROTO(struct va_format *vaf),
+	TP_ARGS(vaf),
+	TP_STRUCT__entry(
+		__dynamic_array(char, msg, I915_GEP_LOG_MAX)
+	),
+	TP_fast_assign(
+		vsnprintf(__get_str(msg), I915_GEP_LOG_MAX, vaf->fmt, *vaf->va);
+	),
+	TP_printk("%s", __get_str(msg))
+);
+
 #endif /* _I915_TRACE_H_ */
 
 /* This part must be outside protection */
-- 
2.19.1

